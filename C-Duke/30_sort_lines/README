For this problem, you will write a program (by modifying the provided
sortLines.c file) which sorts strings from input files. As we have not
yet covered sorting, we have provided the code that does the acutal
sorting.  You can just call this function, which will sort the data.

  void sortData(char ** data, size_t count);

The sortData function takes two arguments.  The first is an array of strings.
The second is the length of that array.  It will re-order the elements of the
array, such that they are sorted.

Your task in this problem primarily centers around reading the data into
the array from the input file(s), so that it can be sorted.  You will also
need to print the data after it is sorted, and free all of the memory you have allocated.

Specifically, this program should take 0 or more command line arguments.
 - If no arguments (other than its own name) are provided (argc ==1), then 
   your program should read from standard input, sort the lines of input,
   print the results, free memory, and exit successfully.
 - If 1 or more arguments are provided (argc > 1), then your program should
   treat each argument as an input file name.  It should open that file,
   read all of the lines of data in it, sort the lines, print the results,
   free the memory, and close the file.  If any errors occur, your program
   should print an appropriate error message and exit with EXIT_FAILURE.
   If no errors occur, your program should indicate its success after processing
   all of the files.

Note that we now place *no* restriction on the length of any individual line of input.  
You should therefore use the getline function to read an arbitrarily long line of 
input, dynamically allocating space for it as needed.   See the man page for getline
for more details. 

You should make sure your program valgrinds cleanly, including no memory leaks
before you submit it.  As always, submit your code for grading.

We've provided one simple test for you to use to test your program. Run it with:
./test.sh

Hints:
  - Don't forget to abstract code out into smaller function.  In my solution,
    I wrote 3 functions other than main (plus the 2 that are provided).
  - Don't forget to draw pictures!  They are even more important
    as you use pointers more and more.

对于这个问题，您将编写一个程序（通过修改提供的 sortLines.c 文件）来对输入文件中的字符串进行排序。
由于我们尚未涉及排序，我们已经提供了执行实际排序的代码。您只需调用此函数，它将对数据进行排序。

void sortData(char ** data, size_t count);

sortData 函数接受两个参数。第一个是字符串数组。第二个是该数组的长度。它将重新排列数组的元素，使它们按顺序排列。

在这个问题中，您的主要任务是从输入文件中读取数据到数组中，以便进行排序。您还需要在排序后打印数据，并释放所有分配的内存。

具体来说，该程序应接受 0 个或多个命令行参数。

如果没有提供参数（除了程序本身的名称）（argc == 1），
则程序应从标准输入读取，排序输入的行，打印结果，释放内存，并成功退出。

如果提供了 1 个或多个参数（argc > 1），则程序应将每个参数视为输入文件名。
它应打开该文件，读取其中的所有数据行，排序这些行，打印结果，释放内存，并关闭文件。

如果发生任何错误，程序应打印适当的错误消息并以 EXIT_FAILURE 退出。

如果没有错误发生，程序应在处理完所有文件后指示其成功。
请注意，我们现在对任何单个输入行的长度不做任何限制。
因此，您应使用 getline 函数读取任意长的输入行，并根据需要动态分配空间。
有关 getline 的更多详细信息，请参阅手册页。

您应确保程序在 valgrind 下运行干净，包括没有内存泄漏，然后再提交代码。
像往常一样，提交您的代码以供评分。

我们为您提供了一个简单的测试，您可以用它来测试您的程序。运行它：

./test.sh

提示：

不要忘记将代码抽象成更小的函数。在我的解决方案中，我编写了 3 个函数，
除了 main 之外（加上提供的 2 个函数）。
不要忘记画图！随着您越来越多地使用指针，它们变得更加重要。


测试输出结果：
ASCII 码中，大写字母的值小于小写字母的值。因此，大写字母会排在小写字母之前。